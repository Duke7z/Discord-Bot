from datetime import datetime, timedelta
import disnake
from disnake.ext import commands
from .warns_db import warndb


bot = commands.Bot(command_prefix="!", intents=disnake.Intents.all())
moderators = {}

class Slash(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    class Moder(commands.Cog):
        cog_name = "üõ°Ô∏è  –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ "

        def __init__(self, bot):
            self.bot = bot

        @commands.slash_command(name="clear", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ")
        @commands.has_permissions(manage_messages=True)
        async def clear_messages(self, inter: disnake.ApplicationCommandInteraction, amount: int):
            channel = inter.channel
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –º–µ–Ω—å—à–µ 1
            if amount < 1:
                await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.", ephemeral=True)
                return
            messages = await channel.history(limit=amount).flatten()
            if messages:
                await channel.purge(limit=amount)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                await inter.response.send_message(f"{amount} —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.", ephemeral=True)
            else:
                await inter.response.send_message("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", ephemeral=True)

        @commands.slash_command(name="kick", description="–ö–∏–∫–Ω—É—Ç—å –∫–æ–≥–æ-—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞")
        @commands.has_permissions(kick_members=True)
        async def kick(self, ctx, user: disnake.Member, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
            moderators[user.id] = ctx.author.id
            await user.kick(reason=reason)
            await ctx.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç", ephemeral=True)

        @commands.slash_command(name="ban", description="–ó–∞–±–∞–Ω–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        @commands.has_permissions(ban_members=True)
        async def ban(self, ctx, user: disnake.User, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
            moderators[user.id] = ctx.author.id
            await ctx.guild.ban(user, reason=reason)
            await ctx.response.send_message("–ë–∞–Ω –≤—ã–¥–∞–Ω", ephemeral=True)

        @commands.slash_command(name="mute", description="–ó–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                                usage="mute <—É—á–∞—Å—Ç–Ω–∏–∫> <–≤—Ä–µ–º—è> [–ø—Ä–∏—á–∏–Ω–∞]")
        @commands.has_permissions(moderate_members=True)
        async def mute(self, ctx, user: disnake.Member, time: int, reason="–ù–µ —Å–ª–µ–¥–∏–ª –∑–∞ —è–∑—ã–∫–æ–º"):
            expired_at = datetime.now() + timedelta(minutes=int(time))
            moderators[user.id] = ctx.author.id
            await user.timeout(reason=reason, until=expired_at)
            await ctx.response.send_message("–ú—É—Ç –≤—ã–¥–∞–Ω", ephemeral=True)

        @commands.slash_command(name="unban", description="–†–∞–∑–±–∞–Ω–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        @commands.has_permissions(ban_members=True)
        async def unban(self, ctx, user: disnake.User, reason="–ò—Å–∫—É–ø–∏–ª –≤–∏–Ω—É"):
            moderators[user.id] = ctx.author.id
            await ctx.guild.unban(user, reason=reason)
            await ctx.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω", ephemeral=True)

        @commands.slash_command(name="unmute", description="–†–∞–∑–º—É—Ç–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        @commands.has_permissions(moderate_members=True)
        async def unmute(self, ctx, user: disnake.Member, reason="–ü–æ–¥–æ–±–∞—é—â–µ–µ –ø–æ–≤–æ–µ–¥–µ–Ω–∏–µ"):
            moderators[user.id] = ctx.author.id
            await user.timeout(until=None, reason=reason)
            await ctx.response.send_message(f"–ú—É—Ç —Å–Ω—è—Ç", ephemeral=True)

    class Info(commands.Cog):
        cog_name = "üìã  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è "

        def __init__(self, bot):
            self.bot = bot

        @commands.slash_command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        async def help(self, ctx):
            categories = [Slash.Moder, Slash.Info, warndb]
            embed = disnake.Embed(title="–í–æ—Ç —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", color=disnake.Color.blue())

            for category in categories:
                cog_instance = category(self.bot)  # Create an instance of the cog
                commands_info = [f"/{command.name}: {command.description}" for command in
                                 cog_instance.get_slash_commands()]
                if commands_info:
                    embed.add_field(name=category.cog_name, value="\n".join(commands_info), inline=False)

            await ctx.send(embed=embed)


bot.add_cog(Slash(bot))


def setup(bot):
    bot.add_cog(Slash(bot))
    bot.add_cog(Slash.Moder(bot))
    bot.add_cog(Slash.Info(bot))
